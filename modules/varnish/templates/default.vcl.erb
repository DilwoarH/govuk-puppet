<% if govuk_platform == 'production' %>

<%
  whitehall_paths = %w[ /government /bis /cabinetoffice /dclg /mod /defra /fco /dh /dfid /moj /hmrc ]
  whitehall_paths += whitehall_paths.map { |p| p.upcase }
%>

<% frontend_hosts = (govuk_platform == 'production') ? ['frontend.cluster', 'frontend.cluster-1', 'frontend.cluster-2'] : ['frontend.cluster'] %>

<% frontend_hosts.each_with_index do |host, i| %>
backend frontend_<%= i %> {
  .host = "<%= host %>";
  .port = "8080";
  .host_header = "www.<%= govuk_platform %>.alphagov.co.uk";
  .probe = {
    .url = "/";
    .interval = 5s;
    .timeout = 1s;
    .window = 5;
    .threshold = 3;
  }
}

backend search_<%= i %> {
  .host = "<%= host %>";
  .port = "8083";
  .host_header = "search.<%= govuk_platform %>.alphagov.co.uk";
  .probe = {
    .url = "/browse";
    .interval = 5s;
    .timeout = 1s;
    .window = 5;
    .threshold = 3;
  }
}

backend planner_<%= i %> {
  .host = "<%= host %>";
  .host_header = "planner.<%= govuk_platform %>.alphagov.co.uk";
  .port = "8081";
    .probe = {
    .url = "/maternity";
    .interval = 5s;
    .timeout = 1s;
    .window = 5;
    .threshold = 3;
  }
}

backend calendars_<%= i %> {
  .host = "<%= host %>";
  .port = "8082";
  .host_header = "calendars.<%= govuk_platform %>.alphagov.co.uk";
  .probe = {
    .url = "/bank-holidays";
    .interval = 5s;
    .timeout = 1s;
    .window = 5;
    .threshold = 3;
  }
}

backend smartanswers_<%= i %> {
  .host = "<%= host %>";
  .port = "8084";
  .host_header = "smartanswers.<%= govuk_platform %>.alphagov.co.uk";
  .probe = {
    .url = "/calculate-your-holiday-entitlement";
    .interval = 5s;
    .timeout = 1s;
    .window = 5;
    .threshold = 3;
  }
}

backend designprinciples_<%= i %> {
  .host = "<%= host %>";
  .port = "8085";
  .host_header = "designprinciples.<%= govuk_platform %>.alphagov.co.uk";
  .probe = {
    .url = "/designprinciples";
    .interval = 5s;
    .timeout = 1s;
    .window = 5;
    .threshold = 3;
  }
}

backend licencefinder_<%= i %> {
  .host = "<%= host %>";
  .port = "8086";
  .host_header = "licencefinder.<%= govuk_platform %>.alphagov.co.uk";
  .probe = {
    .url = "/licence-finder";
    .interval = 5s;
    .timeout = 1s;
    .window = 5;
    .threshold = 3;
  }
}

backend tariff_api_<%= i %> {
  .host = "<%= host %>";
  .port = "8086";
  .host_header = "tariff-api.<%= govuk_platform %>.alphagov.co.uk";
  .probe = {
    .url = "/";
    .interval = 5s;
    .timeout = 1s;
    .window = 5;
    .threshold = 3;
  }
}

backend tariff_<%= i %> {
  .host = "<%= host %>";
  .port = "8087";
  .host_header = "tariff.<%= govuk_platform %>.alphagov.co.uk";
  .probe = {
    .url = "/";
    .interval = 5s;
    .timeout = 1s;
    .window = 5;
    .threshold = 3;
  }
}
<% end %>

director frontend round-robin {
  <% frontend_hosts.count.times do |i| %>
  {
  .backend = frontend_<%= i %>;
  }
  <% end %>
}
director search round-robin {
  <% frontend_hosts.count.times do |i| %>
  {
  .backend = search_<%= i %>;
  }
  <% end %>
}
director planner round-robin {
  <% frontend_hosts.count.times do |i| %>
  {
  .backend = planner_<%= i %>;
  }
  <% end %>
}
director calendars round-robin {
  <% frontend_hosts.count.times do |i| %>
  {
  .backend = calendars_<%= i %>;
  }
  <% end %>
}
director smartanswers round-robin {
  <% frontend_hosts.count.times do |i| %>
  {
  .backend = smartanswers_<%= i %>;
  }
  <% end %>
}
director designprinciples round-robin {
  <% frontend_hosts.count.times do |i| %>
  {
  .backend = designprinciples_<%= i %>;
  }
  <% end %>
}
director licencefinder round-robin {
  <% frontend_hosts.count.times do |i| %>
  {
  .backend = licencefinder_<%= i %>;
  }
  <% end %>
}
director tariff_api round-robin {
  <% frontend_hosts.count.times do |i| %>
  {
  .backend = tariff_api_<%= i %>;
  }
  <% end %>
}

director tariff round-robin {
  <% frontend_hosts.count.times do |i| %>
  {
  .backend = tariff_<%= i %>;
  }
  <% end %>
}

backend whitehall {
  .host = "whitehall.cluster";
  .port = "8085";
  .probe = {
    .url = "/government";
    .interval = 5s;
    .timeout = 1s;
    .window = 5;
    .threshold = 3;
  }
}

<% else %>

backend router {
  .host = "localhost";
  .port = "8080";
}

<% end %>

acl purge_acl {
  "localhost";
}

sub vcl_recv {

  <% if govuk_platform == 'production' %>

  if (req.url ~ "^/browse$|^/browse\.json|^/browse\/.*\.json$|^/browse\/|^/search$|^/search\?q=.*|^/search\.json\?q=.*|^/autocomplete|^/preload-autocomplete|^/sitemap.xml|^/robots.txt") {
    set req.backend = search;
  } else if (req.url ~ "^/when-do-the-clocks-change|^/bank-holidays") {
    set req.backend = calendars;
  } else if (req.url ~ "/calculate-your-holiday-entitlement|/student-finance-calculator|/inherits-someone-dies-without-will|/maternity-benefits|/calculate-married-couples-allowance") {
    set req.backend = smartanswers;
  } else if (req.url ~ "^/government\/|<%= whitehall_paths.map { |p| "^#{p}$" }.join("|") %>") {
    set req.backend = whitehall;
  } else if (req.url ~ "^/maternity(\.xml|\.json|\.ics)?(\?.*|)$|^/paternity(\.xml|\.json|\.ics)?(\?.*|)$") {
    set req.backend = planner;
  } else if (req.url ~ "^/designprinciples") {
    set req.backend = designprinciples;
  } else if (req.url ~ "^/licence-finder") {
    set req.backend = licencefinder;
  } else {
    set req.backend = frontend;
  }

  <% else %>

  set req.backend = router;

  <% end %>

  # https://www.gov.uk/foo/ -> https://www.gov.uk/foo
  # vcl_error completes the redirect
  # Don't redirect "/" to "".
  if (req.url ~ "(.+)/$") {
    set req.http.x-Redir-Url = regsub(req.url, "^(.+)/$", "\1");
    error 667 req.http.x-Redir-Url;
  }

  <% if govuk_platform == 'preview' %>

  # Rewrite url to pass through router, but only if it's not being retried
  if (!req.url ~ "^/router/route/") {
    set req.url = regsub(req.url, "^/", "/router/route/");
  }

  <% end %>

  # normalize Accept-Encoding header
  if (req.http.Accept-Encoding) {
    if (req.url ~ "\.(jpeg|jpg|png|gif|gz|tgz|bz2|tbz|zip|flv|pdf|mp3|ogg)$") {
      remove req.http.Accept-Encoding; # already compressed
    }
    elsif (req.http.Accept-Encoding ~ "gzip") {
      set req.http.Accept-Encoding = "gzip";
    }
    elsif (req.http.Accept-Encoding ~ "deflate") {
      set req.http.Accept-Encoding = "deflate";
    }
    else {
      remove req.http.Accept-Encoding;
    }
  }

  # Serve stale period
  set req.grace = 6h;

  # remove cookies
  unset req.http.cookie;

  # purge individual URLs from the cache
  if(req.request == "PURGE") {
    if(!client.ip ~ purge_acl) {
      error 405 "Not allowed";
    } else {
      purge("req.url == " req.url);
      error 200 "Purged";
    }
  }

  # don't cache post requests
  if (req.request == "POST") {
    return(pass);
  }

  # allow http auth reqests
  if (req.http.Authorization) {
    return(lookup);
  }

  # Ignore cookies for caching purposes
  if (req.request == "GET" && req.http.cookie) {
    return(lookup);
  }
}

sub vcl_fetch {
  # remove cookies
  unset beresp.http.set-cookie;

  # hide some internal headers
  unset beresp.http.X-XSS-Protection;
  unset beresp.http.X-Slimmer-Section;
  unset beresp.http.X-Slimmer-Proposition;
  unset beresp.http.X-Slimmer-Template;
  unset beresp.http.X-Rack-Cache;
  unset beresp.http.X-Runtime;

  if (beresp.cacheable) {
    # Remove Expires from backend, it's not long enough
    unset beresp.http.expires;

    # Set how long Varnish will keep it
    set beresp.ttl = 15m;

    # marker for vcl_deliver to reset Age
    set beresp.http.magicmarker = "1";
  }

  # if we get a 503 error then server stale content
  if (beresp.status >= 503 && beresp.status <= 504) {
    set beresp.saintmode = 5m;
    if (req.restarts > 0) {
      return(restart);
    }
  }

  # Serve stale period
  set beresp.grace = 6h;

  # Allow cached authorized requests
  if (req.http.Authorization) {
    return(deliver);
  }

  # Ignore cookies for caching purposes
  if (beresp.http.Set-Cookie) {
    return(deliver);
  }
}

sub vcl_hash {
  set req.hash += req.url;
  return(hash);
}

sub vcl_deliver {
  if (resp.http.magicmarker) {
    # Remove the magic marker
    unset resp.http.magicmarker;

    # By definition we have a fresh object
    set resp.http.age = "0";
  }

  # Add a custom header to indicate whether we hit the cache or not
  if (obj.hits > 0) {
    set resp.http.X-Cache = "HIT";
  } else {
    set resp.http.X-Cache = "MISS";
  }
}

sub vcl_error {
  # 667 errors are our internal "redirect wanted" errors
  # They're raised in vcl_recv.
  if (obj.status == 667) {
    set obj.http.Location = obj.response;
    set obj.status = 301;
    return(deliver);
  }
}

#
# Below is a commented-out copy of the default VCL logic.  If you
# redefine any of these subroutines, the built-in logic will be
# appended to your code.
#
# sub vcl_recv {
#     if (req.http.x-forwarded-for) {
#         set req.http.X-Forwarded-For =
#             req.http.X-Forwarded-For ", " client.ip;
#     } else {
#         set req.http.X-Forwarded-For = client.ip;
#     }
#     if (req.request != "GET" &&
#       req.request != "HEAD" &&
#       req.request != "PUT" &&
#       req.request != "POST" &&
#       req.request != "TRACE" &&
#       req.request != "OPTIONS" &&
#       req.request != "DELETE") {
#         /* Non-RFC2616 or CONNECT which is weird. */
#         return (pipe);
#     }
#     if (req.request != "GET" && req.request != "HEAD") {
#         /* We only deal with GET and HEAD by default */
#         return (pass);
#     }
#     if (req.http.Authorization || req.http.Cookie) {
#         /* Not cacheable by default */
#         return (pass);
#     }
#     return (lookup);
# }
#
# sub vcl_pipe {
#     # Note that only the first request to the backend will have
#     # X-Forwarded-For set.  If you use X-Forwarded-For and want to
#     # have it set for all requests, make sure to have:
#     # set req.http.connection = "close";
#     # here.  It is not set by default as it might break some broken web
#     # applications, like IIS with NTLM authentication.
#     return (pipe);
# }
#
# sub vcl_pass {
#     return (pass);
# }
#
# sub vcl_hash {
#     set req.hash += req.url;
#     if (req.http.host) {
#         set req.hash += req.http.host;
#     } else {
#         set req.hash += server.ip;
#     }
#     return (hash);
# }
#
# sub vcl_hit {
#     if (!obj.cacheable) {
#         return (pass);
#     }
#     return (deliver);
# }
#
# sub vcl_miss {
#     return (fetch);
# }
#
# sub vcl_fetch {
#     if (!beresp.cacheable) {
#         return (pass);
#     }
#     if (beresp.http.Set-Cookie) {
#         return (pass);
#     }
#     return (deliver);
# }
#
# sub vcl_deliver {
#     return (deliver);
# }
#
# sub vcl_error {
#     set obj.http.Content-Type = "text/html; charset=utf-8";
#     synthetic {"
# <?xml version="1.0" encoding="utf-8"?>
# <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
#  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
# <html>
#   <head>
#     <title>"} obj.status " " obj.response {"</title>
#   </head>
#   <body>
#     <h1>Error "} obj.status " " obj.response {"</h1>
#     <p>"} obj.response {"</p>
#     <h3>Guru Meditation:</h3>
#     <p>XID: "} req.xid {"</p>
#     <hr>
#     <address>
#        <a href="http://www.varnish-cache.org/">Varnish cache server</a>
#     </address>
#   </body>
# </html>
# "};
#     return (deliver);
# }
