backend router {
  .host = "localhost";
  .port = "8080";
}

acl purge_acl {
  "localhost";
}

sub vcl_recv {

  set req.backend = router;

  # https://www.gov.uk/foo/ -> https://www.gov.uk/foo
  # vcl_error completes the redirect
  # Don't redirect "/" to "".
  if (req.url ~ "(.+)/$") {
    set req.http.x-Redir-Url = regsub(req.url, "^(.+)/$", "\1");
    error 667 req.http.x-Redir-Url;
  }

  # Rewrite url to pass through router, but only if it's not being retried
  if (!req.url ~ "^/router/route/") {	
    set req.url = regsub(req.url, "^/", "/router/route/");
  }

  # normalize Accept-Encoding header
  if (req.http.Accept-Encoding) {
    if (req.url ~ "\.(jpeg|jpg|png|gif|gz|tgz|bz2|tbz|zip|flv|pdf|mp3|ogg)$") {
      remove req.http.Accept-Encoding; # already compressed
    }
    elsif (req.http.Accept-Encoding ~ "gzip") {
      set req.http.Accept-Encoding = "gzip";
    }
    elsif (req.http.Accept-Encoding ~ "deflate") {
      set req.http.Accept-Encoding = "deflate";
    }
    else {
      remove req.http.Accept-Encoding;
    }
  }

  # Serve stale period
  set req.grace = 6h;

  # remove cookies
  unset req.http.cookie;

  # purge individual URLs from the cache
  if(req.request == "PURGE") {
    if(!client.ip ~ purge_acl) {
      error 405 "Not allowed";
    } else {
<% if scope.lookupvar('varnish::varnish_version') == 3 %>
      ban("req.url == " + req.url);
<% else %>
      purge("req.url == " req.url);
<% end %>
      error 200 "Purged";
    }
  }

  # don't cache post requests
  if (req.request == "POST") {
    return(pass);
  }

  # allow http auth reqests
  if (req.http.Authorization) {
    return(lookup);
  }

  # Ignore cookies for caching purposes
  if (req.request == "GET" && req.http.cookie) {
    return(lookup);
  }
}

sub vcl_fetch {
  # remove cookies
  unset beresp.http.set-cookie;

  # hide some internal headers
  unset beresp.http.X-XSS-Protection;
  unset beresp.http.X-Slimmer-Section;
  unset beresp.http.X-Slimmer-Proposition;
  unset beresp.http.X-Slimmer-Template;
  unset beresp.http.X-Rack-Cache;
  unset beresp.http.X-Runtime;

<% if scope.lookupvar('varnish::varnish_version') == 3 %>
  if (beresp.ttl > 0s) {
<% else %>
  if (beresp.cacheable) {
<% end %>
    # Remove Expires from backend, it's not long enough
    unset beresp.http.expires;

    # Set how long Varnish will keep it
    set beresp.ttl = <%= scope.lookupvar('varnish::default_ttl') %>s;

    # marker for vcl_deliver to reset Age
    set beresp.http.magicmarker = "1";
  }

  # if we get a 503 error then server stale content
  if (beresp.status >= 503 && beresp.status <= 504) {
    set beresp.saintmode = 5m;
    if (req.restarts > 0) {
      return(restart);
    }
  }

  # Serve stale period
  set beresp.grace = 6h;

  # Allow cached authorized requests
  if (req.http.Authorization) {
    return(deliver);
  }

  # Ignore cookies for caching purposes
  if (beresp.http.Set-Cookie) {
    return(deliver);
  }
}

sub vcl_hash {
<% if scope.lookupvar('varnish::varnish_version') == 3 %>
  hash_data(req.url);
<% else %>
  set req.hash += req.url;
<% end %>
  return(hash);
}

sub vcl_deliver {
  if (resp.http.magicmarker) {
    # Remove the magic marker
    unset resp.http.magicmarker;

    # By definition we have a fresh object
    set resp.http.age = "0";
  }

  # Add a custom header to indicate whether we hit the cache or not
  if (obj.hits > 0) {
    set resp.http.X-Cache = "HIT";
  } else {
    set resp.http.X-Cache = "MISS";
  }
}

sub vcl_error {
  # 667 errors are our internal "redirect wanted" errors
  # They're raised in vcl_recv.
  if (obj.status == 667) {
    set obj.http.Location = obj.response;
    set obj.status = 301;
    return(deliver);
  }
}
