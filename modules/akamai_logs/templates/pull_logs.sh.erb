#! /bin/bash
# Pulls the log files from Akamai
set -x
set -e

LOCAL_LOGS_DIR=<%= @local_logs_dir %>/logs

AKAMAI_USER=<%= @akamai_user %>
AKAMAI_HOST=<%= @akamai_host %>
AKAMAI_LOGS_DIR=<%= @path_to_logs %>

BACKUP_USER=<%= @user %>
BACKUP_HOST=<%= @backup_host %>
BACKUP_LOGS_DIR=<%= @local_logs_dir %>

CONFIG_SHOULD_RUN="/etc/akamai_logs/should_run"
CONFIG_SHOULD_PURGE_FROM_AKAMAI="/etc/akamai_logs/should_purge_from_akamai"

if [ ! -e $CONFIG_SHOULD_RUN ]; then
  exit 1
fi

LOCK_FILE=$LOCAL_DOWNLOAD_DIR/.lock
TIME=$(date +%s)
LIST_FILE=$LOCAL_DOWNLOAD_DIR/filelist-$TIME

# Just to be sure
mkdir -p $LOCAL_LOGS_DIR

# Create lockfile, to avoid running the scanner
if [ -e $LOCK_FILE ]; then
  echo "WARN: Lock file exists, aborting"
  exit 1
fi
touch $LOCK_FILE

# Get the files via rsync
rsync -iacz -e ssh $AKAMAI_USER@$AKAMAI_HOST:$AKAMAI_LOGS_DIR/ $LOCAL_LOGS_DIR > $LIST_FILE

# RSYNC the files to my backup machine
rsync -acz --exclude=.lock $LOCAL_LOGS_DIR/ $BACKUP_USER@$BACKUP_HOST:$BACKUP_LOGS_DIR

# Delete the files on akamai
if [ -e $CONFIG_SHOULD_PURGE_FROM_AKAMAI ]; then
  grep '^>f' $LIST_FILE | awk '{print $2}' | while read log_file; do
    echo "rm $log_file" | sftp $AKAMAI_USER@$AKAMAI_HOST:$AKAMAI_LOGS_DIR
  done
fi

# Cleanup Tempfiles
rm $LIST_FILE

# Remove the lockfile, to allow the scanner to run again
rm $LOCK_FILE