#!/bin/bash
# Script to push backups offsite.
set -e
set -o pipefail

# Defaults, assumed failed.
NAGIOS_CODE=2
NAGIOS_MESSAGE="CRITICAL: Backup failed"

# Triggered whenever this script exits, successful or otherwise. The values
# of CODE/MESSAGE will be taken from that point in time.

function nagios_passive () {
  printf "<%= @fqdn %>\t<%= @service_desc %>\t${NAGIOS_CODE}\t${NAGIOS_MESSAGE}\n" | /usr/sbin/send_nsca -H alert.cluster >/dev/null
}
trap nagios_passive EXIT

STARTEPOCH=$(date +'%s')
APPNAME=$(basename $0)

GPG_KEY='13B84C37AB52D76B3F53CF0E7C34BD7A05119BA4'

BKP_DIR="/data/backups"

TAR_OPTS="cf -"
TAR_OPTS="$TAR_OPTS ${BKP_DIR}/*/var/lib/automongodbbackup/latest/*.tgz"
TAR_OPTS="$TAR_OPTS ${BKP_DIR}/*/var/lib/automysqlbackup/latest.tbz2"
TAR_OPTS="$TAR_OPTS ${BKP_DIR}/*/var/lib/autopostgresqlbackup/latest.tbz2"
TAR_OPTS="$TAR_OPTS ${BKP_DIR}/archived/*"

GPG_OPTS="-q --yes --batch --trust-model always --cipher-algo AES256 --encrypt -r ${GPG_KEY}"
DEST="<%= @dest_host -%>"
FILENAME="govuk-backup-$(date +%Y%m%d).tar.gpg"
SSH_OPTS="-Cp -o VisualHostKey=no"
TEMP_FILE="$(mktemp --tmpdir=/data/backups)"

if ! gpg -q --list-keys $GPG_KEY > /dev/null 2>&1
then
  gpg -q --recv-keys $GPG_KEY > /dev/null 2>&1
fi

tar $TAR_OPTS 2>/dev/null | gpg $GPG_OPTS > $TEMP_FILE
scp $SSH_OPTS $TEMP_FILE ${DEST}:<%= @dest_folder -%>${FILENAME}
rm -f $TEMP_FILE

if [ $? == 0 ]; then
  NAGIOS_CODE=0
  NAGIOS_MESSAGE="OK: Backup successful"
fi

FINISHEPOCH=$(date +'%s')
TOTALTIME=$(expr $FINISHEPOCH - $STARTEPOCH)

MESSAGE="Offsite backups completed in T:$TOTALTIME seconds"
logger -t $APPNAME $MESSAGE
