#!/bin/bash
# Script to push backups offsite.
set -e
set -o pipefail

<%- if @icinga_check -%>
# Defaults, assumed failed.
NAGIOS_CODE=2
NAGIOS_MESSAGE="CRITICAL: Tarball backup of Graphite failed"

# Triggered whenever this script exits, successful or otherwise. The values
# of CODE/MESSAGE will be taken from that point in time.

function nagios_passive () {
  printf "<%= @fqdn %>\t<%= @service_desc %>\t${NAGIOS_CODE}\t${NAGIOS_MESSAGE}\n" | /usr/sbin/send_nsca -H alert.cluster >/dev/null
}
trap nagios_passive EXIT
<%- end -%>

STARTEPOCH=$(date +'%s')
APPNAME=$(basename $0)

set +e

tar -cj --ignore-failed-read -f <%= @backup_directory %>/graphite-storage-whisper-inprogress.tar.bz2 <%= @whisper_directory %> >/dev/null 2>&1
TAR_EXIT=$?
# gnu tar uses an exit status of 1 to mean "some files differ" which we expect as they might
# be updated as we are reading them. We should catch that to prevent early exit
if [ $TAR_EXIT -gt 1 ]; then
  NAGIOS_MESSAGE="Tar exited with a fatal error"
  exit 2
fi

set -e

mv -f <%= @backup_directory %>/graphite-storage-whisper-inprogress.tar.bz2 <%= @backup_directory %>/graphite-storage-whisper.tar.bz2

<%- if @icinga_check -%>
if [ $? == 0 ]; then
  NAGIOS_CODE=0
  NAGIOS_MESSAGE="OK: Graphite tarball backup successful"
fi
<%- end -%>

FINISHEPOCH=$(date +'%s')
TOTALTIME=$(expr $FINISHEPOCH - $STARTEPOCH)

MESSAGE="Graphite tarball backup completed in T:$TOTALTIME seconds with exit($NAGIOS_CODE)"
logger -t $APPNAME $MESSAGE
