#!/usr/bin/env python

from __future__ import print_function

# NB: This script uses optparse, not argparse, for Python 2.6 compatibility and
# to avoid the need to depend on any other packages.
from optparse import OptionParser
import json
import string
import urllib
import urllib2

def commasep_callback(option, opt, value, parser):
    setattr(parser.values, option.dest, value.split(','))

def main():
    opts, args = parser.parse_args()

    if opts.node_class or opts.puppet_class:
        endpoint = 'resources'
        host_key = 'certname'

        if opts.node_class:
            classes = ["Govuk::Node::S_{0}".format(c) for c in opts.node_class]
        else:
            classes = [string.capwords(c, '::') for c in opts.puppet_class]

        classes = [
            '["=", "title", "{0}"]'.format(c)
            for c in classes
        ]
        class_query = '["or", {0}]'.format(', '.join(classes))
        query = '["and", ["=", "type", "Class"], {0}]'.format(class_query)

    else:
        endpoint = 'nodes'
        host_key = 'name'

        query = '["=", ["node", "active"], true]'

    qs = urllib.urlencode({'query': query})
    res = urllib2.urlopen('http://puppetdb.cluster/v2/{0}?{1}'.format(endpoint, qs))
    hosts = json.load(res)

    for host in hosts:
        print(host[host_key])


parser = OptionParser(description='List nodes in this environment from PuppetDB')

parser.add_option(
    '-c', '--node-class',
    '--class',
    dest='node_class',
    type='str',
    help='Restrict the output to nodes of the specified govuk_node_class. (e.g. "frontend,backend")',
    action='callback',
    callback=commasep_callback
)
parser.add_option(
    '-C', '--puppet-class',
    dest='puppet_class',
    type='str',
    help='Restrict the output to nodes of the specified Puppet class. (e.g. "nginx,ssh")',
    action='callback',
    callback=commasep_callback
)

if __name__ == '__main__':
    main()
