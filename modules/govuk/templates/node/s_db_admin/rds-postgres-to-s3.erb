#!/bin/bash
#
# Script to stream pg_dump straight to an S3 bucket
#
exec 1> >(logger -s -t $(basename $0)) 2>&1

# The default Icinga passive alert assumes that the script failed
NAGIOS_CODE=2
NAGIOS_MESSAGE="CRITICAL: RDS PostgreSQL backup to S3 failed"

# Triggered whenever this script exits, successful or otherwise. The values
# of CODE/MESSAGE will be taken from that point in time.
function nagios_passive () {
  printf "<%= @ipaddress %>\t<%= @postgres_backup_desc %>\t${NAGIOS_CODE}\t${NAGIOS_MESSAGE}\n" | /usr/sbin/send_nsca -H <%= @alert_hostname %> >/dev/null
}

trap nagios_passive EXIT

PSQL_OPTS="-U <%= @postgres_user -%> -p <%= @postgres_port -%> -h <%= @postgres_host -%>"

DATABASES=$(psql ${PSQL_OPTS} -At -c 'select datname from pg_catalog.pg_database;' |egrep -v "^template[0-9]$|^postgres$")
ERRORLOG="/tmp/rds-postgres-to-s3.errors-$(date +%F)"

for database in $DATABASES; do
  echo "Starting dump of ${database} to S3"
  pg_dump ${PSQL_OPTS} $database | /usr/local/bin/gof3r put --endpoint s3-<%= @aws_region -%>.amazonaws.com -b <%= @backup_s3_bucket -%> -k postgres/$(date +%F)/$database.dump

  if [[ $? != 0 ]]; then
    echo "Error dumping ${database}"
    echo $database >> $ERRORLOG
  else
    echo "Finished dump of ${database} to S3"
  fi
done

if [[ ! -e $ERRORLOG ]]; then
  NAGIOS_CODE=0
  NAGIOS_MESSAGE="OK: RDS MySQL backup to S3 succeeded"
fi
